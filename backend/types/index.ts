export declare class Hyperswarm extends EventEmitter {
	constructor(opts?: {});
	keyPair: any;
	dht: any;
	server: any;
	destroyed: boolean;
	maxPeers: any;
	maxClientConnections: any;
	maxServerConnections: any;
	connections: Set<any>;
	peers: Map<any, any>;
	_listening: any;
	_discovery: Map<any, any>;
	_timer: any;
	_queue: any;
	_allConnections: any;
	_pendingFlushes: any[];
	_flushTick: number;
	_clientConnections: number;
	_serverConnections: number;
	_firewall: any;
	_enqueue(peerInfo: any): void;
	_requeue(batch: any): void;
	_flushMaybe(peerInfo: any): void;
	_shouldConnect(): boolean;
	_shouldRequeue(peerInfo: any): boolean;
	_attemptClientConnections(): void;
	_handleFirewall(remotePublicKey: any, payload: any): any;
	_handleServerConnection(conn: any): any;
	_upsertPeer(publicKey: any, nodes: any): any;
	_handlePeer(peer: any, topic: any): void;
	status(key: any): any;
	listen(): any;
	join(topic: any, opts?: {}): any;
	leave(topic: any): any;
	flush(): Promise<any>;
	clear(): Promise<any>;
	destroy(): Promise<void>;
}
import { EventEmitter } from 'events';

export declare class CorestoreNetworker {
	constructor(corestore: any, opts?: {});
	corestore: any;
	opts?: {};
	keyPair: any;
	_replicationOpts: {
		encrypt: boolean;
		live: boolean;
		keyPair: any;
		onauthenticate: any;
	};
	streams: any;
	peers: any;
	_joined: any;
	_flushed: any;
	_configurations: any;
	_extensions: any;
	_streamsProcessing: number;
	_streamsProcessed: number;
	swarm: Hyperswarm;
	_replicate(protocolStream: any): void;
	_flush(keyString: any, keyBuf: any, client: any): Promise<void>;
	_join(discoveryKey: any, opts?: {}): Promise<void>;
	_leave(discoveryKey: any): any;
	_registerAllExtensions(peer: any): void;
	_unregisterAllExtensions(peer: any): void;
	_addStream(stream: any): void;
	_removeStream(stream: any): void;
	_open(): void;
	_close(): Promise<any>;
	close(): Promise<any>;
	listen(): any;
	status(discoveryKey: any): any;
	allStatuses(): any[];
	configure(discoveryKey: any, opts?: {}): Promise<any>;
	_configure(discoveryKey: any, opts?: any): Promise<any>;
	joined(discoveryKey: any): any;
	flushed(discoveryKey: any): any;
	registerExtension(name: any, handlers: any): any;
}
